(* Generated by ocaml-tree-sitter. *)
(*
   requirements grammar

   entrypoint: file
*)

open! Sexplib.Conv
open Tree_sitter_run

type package = Token.t (* pattern [a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])? *)

type pat_7ef074c = Token.t (* pattern "([^']|\\\\')+" *)

type pat_509ec78 = Token.t (* pattern \r?\n *)

type pat_5d0eb07 = Token.t (* pattern [A-Z0-9_]+ *)

type pat_1a808a5 = Token.t (* pattern [bB][zZ][rR]\+[lL][pP]: *)

type version = Token.t (* pattern [a-zA-Z0-9*!+._-]+ *)

type pat_8166075 = Token.t (* pattern "([^\"]|\\\\\")+" *)

type marker_var = [
    `Python_vers of Token.t (* "python_version" *)
  | `Python_full_vers of Token.t (* "python_full_version" *)
  | `Os_name of Token.t (* "os_name" *)
  | `Sys_plat of Token.t (* "sys_platform" *)
  | `Plat_rele of Token.t (* "platform_release" *)
  | `Plat_system of Token.t (* "platform_system" *)
  | `Plat_vers of Token.t (* "platform_version" *)
  | `Plat_mach of Token.t (* "platform_machine" *)
  | `Plat_python_impl of Token.t (* "platform_python_implementation" *)
  | `Impl_name of Token.t (* "implementation_name" *)
  | `Impl_vers of Token.t (* "implementation_version" *)
  | `Extra of Token.t (* "extra" *)
]

type comment = Token.t (* pattern #[^\n]* *)

type pat_90320f7 = Token.t (* pattern [a-zA-Z+]+:\/\/ *)

type pat_3965d2a = Token.t (* pattern (\S|\\ ) *)

type pat_a742575 = Token.t (* pattern [ \t] *)

type version_cmp = Token.t

type pat_d0b6c52 = Token.t (* pattern [./]\S* *)

type pat_09700b0 = Token.t (* pattern \S *)

type env_var = (Token.t (* "${" *) * pat_5d0eb07 * Token.t (* "}" *))

type quoted_string = [
    `DQUOT_pat_8166075_DQUOT of (
        Token.t (* "\"" *) * pat_8166075 * Token.t (* "\"" *)
    )
  | `SQUOT_pat_7ef074c_SQUOT of (
        Token.t (* "'" *) * pat_7ef074c * Token.t (* "'" *)
    )
]

type argument = pat_3965d2a list (* one or more *)

type space = pat_a742575 list (* one or more *)

type url = (
    [ `Pat_90320f7 of pat_90320f7 | `Pat_1a808a5 of pat_1a808a5 ]
  * [ `Env_var of env_var | `Pat_09700b0 of pat_09700b0 ]
      list (* one or more *)
)

type anon_choice_arg_1722ecd = [
    `Arg of argument
  | `Quoted_str of quoted_string
]

type anon_opt_sp_COMMA_opt_sp_pack_70a3b35 = (
    space option
  * Token.t (* "," *)
  * space option
  * package (*tok*)
)

type marker_op = [
    `In of Token.t (* "in" *)
  | `Not_sp_in of (Token.t (* "not" *) * space * Token.t (* "in" *))
]

type version_list = (
    space option
  * version_cmp (*tok*)
  * space option
  * version (*tok*)
  * (
        space option
      * Token.t (* "," *)
      * space option
      * version_cmp (*tok*)
      * space option
      * version (*tok*)
    )
      list (* zero or more *)
)

type anon_choice_EQ_5f5a49e = [ `EQ of Token.t (* "=" *) | `Sp of space ]

type end_of_line = [
    `Sp_comm_pat_509ec78 of (space * comment (*tok*) * pat_509ec78)
  | `Opt_sp_pat_509ec78 of (space option * pat_509ec78)
]

type anon_choice_url_4458a7b = [ `Url of url | `Quoted_str of quoted_string ]

type url_spec = (space option * Token.t (* "@" *) * space option * url)

type anon_choice_arg_d518d88 = [
    `Arg of argument
  | `Quoted_str of quoted_string
  | `Url of url
]

type extras_ = (
    space option
  * Token.t (* "[" *)
  * space option
  * space option
  * package (*tok*)
  * anon_opt_sp_COMMA_opt_sp_pack_70a3b35 list (* zero or more *)
  * space option
  * Token.t (* "]" *)
)

type version_spec = [
    `Vers_list of version_list
  | `Opt_sp_LPAR_vers_list_opt_sp_RPAR of (
        space option
      * Token.t (* "(" *)
      * version_list
      * space option
      * Token.t (* ")" *)
    )
]

type requirement_opt = (
    space option
  * [
        `DASH_cdf9ae5 of Token.t (* "--global-option" *)
      | `DASHDs of Token.t (* "--config-settings" *)
      | `DASH_c54adde of Token.t (* "--hash" *)
    ]
  * anon_choice_EQ_5f5a49e
  * anon_choice_arg_1722ecd
)

type global_opt = [
    `Choice_DASH_choice_EQ_choice_arg_61081d4 of (
        [
            `DASH_0fd07b3 of Token.t (* "--no-binary" *)
          | `DASH_7e0b961 of Token.t (* "--only-binary" *)
          | `DASH_c2015a3 of Token.t (* "--trusted-host" *)
          | `DASH_819a70f of Token.t (* "--use-feature" *)
        ]
      * anon_choice_EQ_5f5a49e
      * anon_choice_arg_1722ecd
    )
  | `Choice_DASH of [
        `DASH_b141e1e of Token.t (* "--no-index" *)
      | `DASH_046c7ad of Token.t (* "--prefer-binary" *)
      | `DASHDs of Token.t (* "--require-hashes" *)
      | `DASH_a1cf4d5 of Token.t (* "--pre" *)
    ]
  | `Choice_DASHi_opt_sp_choice_url of (
        [ `DASHi of Token.t (* "-i" *) ]
      * space option
      * anon_choice_url_4458a7b
    )
  | `Choice_DASH_choice_EQ_choice_url of (
        [
            `DASH_3199eac of Token.t (* "--index-url" *)
          | `DASH_a88e2fb of Token.t (* "--extra-index-url" *)
        ]
      * anon_choice_EQ_5f5a49e
      * anon_choice_url_4458a7b
    )
  | `Choice_DASHc_opt_sp_choice_arg of (
        [ `DASHc of Token.t (* "-c" *) | `DASHr of Token.t (* "-r" *) ]
      * space option
      * anon_choice_arg_1722ecd
    )
  | `Choice_DASH_choice_EQ_choice_arg_10363ea of (
        [
            `DASH_2f2c9e5 of Token.t (* "--constraint" *)
          | `DASH_375114c of Token.t (* "--requirement" *)
        ]
      * anon_choice_EQ_5f5a49e
      * anon_choice_arg_1722ecd
    )
  | `Choice_DASHe_opt_sp_choice_arg of (
        [ `DASHe of Token.t (* "-e" *) | `DASHf of Token.t (* "-f" *) ]
      * space option
      * anon_choice_arg_d518d88
    )
  | `Choice_DASH_choice_EQ_choice_arg_c5ea372 of (
        [
            `DASH of Token.t (* "--editable" *)
          | `DASHDs of Token.t (* "--find-links" *)
        ]
      * anon_choice_EQ_5f5a49e
      * anon_choice_arg_d518d88
    )
]

type marker = [
    `Marker_expr of (
        marker_var
      * space option
      * [ `Vers_cmp of version_cmp (*tok*) | `Marker_op of marker_op ]
      * space option
      * quoted_string
    )
  | `Marker_or of (
        marker
      * space option
      * Token.t (* "or" *)
      * space option
      * marker
    )
  | `Marker_and of (
        marker
      * space option
      * Token.t (* "and" *)
      * space option
      * marker
    )
  | `Marker_paren of (
        Token.t (* "(" *)
      * space option
      * marker
      * space option
      * Token.t (* ")" *)
    )
]

type marker_spec = (space option * Token.t (* ";" *) * space option * marker)

type requirement = (
    package (*tok*)
  * extras_ option
  * [ `Vers_spec of version_spec | `Url_spec of url_spec ] option
  * marker_spec option
  * requirement_opt list (* zero or more *)
)

type file =
  [
      `Opt_sp_opt_comm_pat_509ec78 of (
          space option
        * comment (*tok*) option
        * pat_509ec78
      )
    | `Opt_sp_choice_requ_choice_sp_comm_pat_509ec78 of (
          space option
        * [
              `Requ of requirement
            | `Url of url
            | `Pat_d0b6c52 of pat_d0b6c52
            | `Global_opt of global_opt
          ]
        * end_of_line
      )
  ]
    list (* zero or more *)

type package_list (* inlined *) = (
    space option
  * package (*tok*)
  * anon_opt_sp_COMMA_opt_sp_pack_70a3b35 list (* zero or more *)
)

type marker_expr (* inlined *) = (
    marker_var
  * space option
  * [ `Vers_cmp of version_cmp (*tok*) | `Marker_op of marker_op ]
  * space option
  * quoted_string
)

type linebreak (* inlined *) = (Token.t (* "\\" *) * end_of_line)

type marker_and (* inlined *) = (
    marker
  * space option
  * Token.t (* "and" *)
  * space option
  * marker
)

type marker_or (* inlined *) = (
    marker
  * space option
  * Token.t (* "or" *)
  * space option
  * marker
)

type marker_paren (* inlined *) = (
    Token.t (* "(" *)
  * space option
  * marker
  * space option
  * Token.t (* ")" *)
)

type extra = [ `Linebreak of Loc.t * linebreak ]

type extras = extra list
