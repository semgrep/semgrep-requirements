(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_requirements"

let parse_source_string ?src_file contents =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "linebreak";
]

let children_regexps : (string * Run.exp option) list = [
  "pat_509ec78", None;
  "pat_09700b0", None;
  "version", None;
  "marker_var",
  Some (
    Alt [|
      Token (Literal "python_version");
      Token (Literal "python_full_version");
      Token (Literal "os_name");
      Token (Literal "sys_platform");
      Token (Literal "platform_release");
      Token (Literal "platform_system");
      Token (Literal "platform_version");
      Token (Literal "platform_machine");
      Token (Literal "platform_python_implementation");
      Token (Literal "implementation_name");
      Token (Literal "implementation_version");
      Token (Literal "extra");
    |];
  );
  "comment", None;
  "pat_a742575", None;
  "pat_1a808a5", None;
  "pat_d0b6c52", None;
  "pat_8166075", None;
  "package", None;
  "pat_5d0eb07", None;
  "version_cmp", None;
  "pat_3965d2a", None;
  "pat_90320f7", None;
  "pat_7ef074c", None;
  "space",
  Some (
    Repeat1 (
      Token (Name "pat_a742575");
    );
  );
  "env_var",
  Some (
    Seq [
      Token (Literal "${");
      Token (Name "pat_5d0eb07");
      Token (Literal "}");
    ];
  );
  "argument",
  Some (
    Repeat1 (
      Token (Name "pat_3965d2a");
    );
  );
  "quoted_string",
  Some (
    Alt [|
      Seq [
        Token (Literal "\"");
        Token (Name "pat_8166075");
        Token (Literal "\"");
      ];
      Seq [
        Token (Literal "'");
        Token (Name "pat_7ef074c");
        Token (Literal "'");
      ];
    |];
  );
  "extras",
  Some (
    Seq [
      Opt (
        Token (Name "space");
      );
      Token (Literal "[");
      Opt (
        Token (Name "space");
      );
      Opt (
        Token (Name "space");
      );
      Token (Name "package");
      Repeat (
        Seq [
          Opt (
            Token (Name "space");
          );
          Token (Literal ",");
          Opt (
            Token (Name "space");
          );
          Token (Name "package");
        ];
      );
      Opt (
        Token (Name "space");
      );
      Token (Literal "]");
    ];
  );
  "version_list",
  Some (
    Seq [
      Opt (
        Token (Name "space");
      );
      Token (Name "version_cmp");
      Opt (
        Token (Name "space");
      );
      Token (Name "version");
      Repeat (
        Seq [
          Opt (
            Token (Name "space");
          );
          Token (Literal ",");
          Opt (
            Token (Name "space");
          );
          Token (Name "version_cmp");
          Opt (
            Token (Name "space");
          );
          Token (Name "version");
        ];
      );
    ];
  );
  "marker_op",
  Some (
    Alt [|
      Token (Literal "in");
      Seq [
        Token (Literal "not");
        Token (Name "space");
        Token (Literal "in");
      ];
    |];
  );
  "linebreak",
  Some (
    Seq [
      Token (Literal "\\");
      Alt [|
        Seq [
          Token (Name "space");
          Token (Name "comment");
          Token (Name "pat_509ec78");
        ];
        Seq [
          Opt (
            Token (Name "space");
          );
          Token (Name "pat_509ec78");
        ];
      |];
    ];
  );
  "url",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_90320f7");
        Token (Name "pat_1a808a5");
      |];
      Repeat1 (
        Alt [|
          Token (Name "env_var");
          Token (Name "pat_09700b0");
        |];
      );
    ];
  );
  "requirement_opt",
  Some (
    Seq [
      Opt (
        Token (Name "space");
      );
      Alt [|
        Token (Literal "--global-option");
        Token (Literal "--config-settings");
        Token (Literal "--hash");
      |];
      Alt [|
        Token (Literal "=");
        Token (Name "space");
      |];
      Alt [|
        Token (Name "argument");
        Token (Name "quoted_string");
      |];
    ];
  );
  "version_spec",
  Some (
    Alt [|
      Token (Name "version_list");
      Seq [
        Opt (
          Token (Name "space");
        );
        Token (Literal "(");
        Token (Name "version_list");
        Opt (
          Token (Name "space");
        );
        Token (Literal ")");
      ];
    |];
  );
  "marker_expr",
  Some (
    Seq [
      Token (Name "marker_var");
      Opt (
        Token (Name "space");
      );
      Alt [|
        Token (Name "version_cmp");
        Token (Name "marker_op");
      |];
      Opt (
        Token (Name "space");
      );
      Token (Name "quoted_string");
    ];
  );
  "url_spec",
  Some (
    Seq [
      Opt (
        Token (Name "space");
      );
      Token (Literal "@");
      Opt (
        Token (Name "space");
      );
      Token (Name "url");
    ];
  );
  "global_opt",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Literal "--no-binary");
          Token (Literal "--only-binary");
          Token (Literal "--trusted-host");
          Token (Literal "--use-feature");
        |];
        Alt [|
          Token (Literal "=");
          Token (Name "space");
        |];
        Alt [|
          Token (Name "argument");
          Token (Name "quoted_string");
        |];
      ];
      Alt [|
        Token (Literal "--no-index");
        Token (Literal "--prefer-binary");
        Token (Literal "--require-hashes");
        Token (Literal "--pre");
      |];
      Seq [
        Alt [|
          Token (Literal "-i");
        |];
        Opt (
          Token (Name "space");
        );
        Alt [|
          Token (Name "url");
          Token (Name "quoted_string");
        |];
      ];
      Seq [
        Alt [|
          Token (Literal "--index-url");
          Token (Literal "--extra-index-url");
        |];
        Alt [|
          Token (Literal "=");
          Token (Name "space");
        |];
        Alt [|
          Token (Name "url");
          Token (Name "quoted_string");
        |];
      ];
      Seq [
        Alt [|
          Token (Literal "-c");
          Token (Literal "-r");
        |];
        Opt (
          Token (Name "space");
        );
        Alt [|
          Token (Name "argument");
          Token (Name "quoted_string");
        |];
      ];
      Seq [
        Alt [|
          Token (Literal "--constraint");
          Token (Literal "--requirement");
        |];
        Alt [|
          Token (Literal "=");
          Token (Name "space");
        |];
        Alt [|
          Token (Name "argument");
          Token (Name "quoted_string");
        |];
      ];
      Seq [
        Alt [|
          Token (Literal "-e");
          Token (Literal "-f");
        |];
        Opt (
          Token (Name "space");
        );
        Alt [|
          Token (Name "argument");
          Token (Name "quoted_string");
          Token (Name "url");
        |];
      ];
      Seq [
        Alt [|
          Token (Literal "--editable");
          Token (Literal "--find-links");
        |];
        Alt [|
          Token (Literal "=");
          Token (Name "space");
        |];
        Alt [|
          Token (Name "argument");
          Token (Name "quoted_string");
          Token (Name "url");
        |];
      ];
    |];
  );
  "marker",
  Some (
    Alt [|
      Token (Name "marker_expr");
      Token (Name "marker_or");
      Token (Name "marker_and");
      Token (Name "marker_paren");
    |];
  );
  "marker_and",
  Some (
    Seq [
      Token (Name "marker");
      Opt (
        Token (Name "space");
      );
      Token (Literal "and");
      Opt (
        Token (Name "space");
      );
      Token (Name "marker");
    ];
  );
  "marker_or",
  Some (
    Seq [
      Token (Name "marker");
      Opt (
        Token (Name "space");
      );
      Token (Literal "or");
      Opt (
        Token (Name "space");
      );
      Token (Name "marker");
    ];
  );
  "marker_paren",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Token (Name "space");
      );
      Token (Name "marker");
      Opt (
        Token (Name "space");
      );
      Token (Literal ")");
    ];
  );
  "marker_spec",
  Some (
    Seq [
      Opt (
        Token (Name "space");
      );
      Token (Literal ";");
      Opt (
        Token (Name "space");
      );
      Token (Name "marker");
    ];
  );
  "requirement",
  Some (
    Seq [
      Token (Name "package");
      Opt (
        Token (Name "extras");
      );
      Opt (
        Alt [|
          Token (Name "version_spec");
          Token (Name "url_spec");
        |];
      );
      Opt (
        Token (Name "marker_spec");
      );
      Repeat (
        Token (Name "requirement_opt");
      );
    ];
  );
  "file",
  Some (
    Repeat (
      Alt [|
        Seq [
          Opt (
            Token (Name "space");
          );
          Opt (
            Token (Name "comment");
          );
          Token (Name "pat_509ec78");
        ];
        Seq [
          Opt (
            Token (Name "space");
          );
          Alt [|
            Token (Name "requirement");
            Token (Name "url");
            Token (Name "pat_d0b6c52");
            Token (Name "global_opt");
          |];
          Alt [|
            Seq [
              Token (Name "space");
              Token (Name "comment");
              Token (Name "pat_509ec78");
            ];
            Seq [
              Opt (
                Token (Name "space");
              );
              Token (Name "pat_509ec78");
            ];
          |];
        ];
      |];
    );
  );
]

let trans_pat_509ec78 ((kind, body) : mt) : CST.pat_509ec78 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_09700b0 ((kind, body) : mt) : CST.pat_09700b0 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_version ((kind, body) : mt) : CST.version =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_marker_var ((kind, body) : mt) : CST.marker_var =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Python_vers (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Python_full_vers (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Os_name (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Sys_plat (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Plat_rele (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Plat_system (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Plat_vers (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Plat_mach (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Plat_python_impl (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Impl_name (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Impl_vers (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Extra (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_a742575 ((kind, body) : mt) : CST.pat_a742575 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_1a808a5 ((kind, body) : mt) : CST.pat_1a808a5 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_d0b6c52 ((kind, body) : mt) : CST.pat_d0b6c52 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_8166075 ((kind, body) : mt) : CST.pat_8166075 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_package ((kind, body) : mt) : CST.package =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_5d0eb07 ((kind, body) : mt) : CST.pat_5d0eb07 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_version_cmp ((kind, body) : mt) : CST.version_cmp =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_3965d2a ((kind, body) : mt) : CST.pat_3965d2a =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_90320f7 ((kind, body) : mt) : CST.pat_90320f7 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_7ef074c ((kind, body) : mt) : CST.pat_7ef074c =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_space ((kind, body) : mt) : CST.space =
  match body with
  | Children v ->
      Run.repeat1
        (fun v -> trans_pat_a742575 (Run.matcher_token v))
        v
  | Leaf _ -> assert false

let trans_env_var ((kind, body) : mt) : CST.env_var =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_pat_5d0eb07 (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_argument ((kind, body) : mt) : CST.argument =
  match body with
  | Children v ->
      Run.repeat1
        (fun v -> trans_pat_3965d2a (Run.matcher_token v))
        v
  | Leaf _ -> assert false

let trans_quoted_string ((kind, body) : mt) : CST.quoted_string =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `DQUOT_pat_8166075_DQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_pat_8166075 (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `SQUOT_pat_7ef074c_SQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_pat_7ef074c (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_extras_ ((kind, body) : mt) : CST.extras_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v3
            ,
            trans_package (Run.matcher_token v4),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      Run.opt
                        (fun v -> trans_space (Run.matcher_token v))
                        v0
                      ,
                      Run.trans_token (Run.matcher_token v1),
                      Run.opt
                        (fun v -> trans_space (Run.matcher_token v))
                        v2
                      ,
                      trans_package (Run.matcher_token v3)
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v6
            ,
            Run.trans_token (Run.matcher_token v7)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_version_list ((kind, body) : mt) : CST.version_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v0
            ,
            trans_version_cmp (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v2
            ,
            trans_version (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3; v4; v5] ->
                    (
                      Run.opt
                        (fun v -> trans_space (Run.matcher_token v))
                        v0
                      ,
                      Run.trans_token (Run.matcher_token v1),
                      Run.opt
                        (fun v -> trans_space (Run.matcher_token v))
                        v2
                      ,
                      trans_version_cmp (Run.matcher_token v3),
                      Run.opt
                        (fun v -> trans_space (Run.matcher_token v))
                        v4
                      ,
                      trans_version (Run.matcher_token v5)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_marker_op ((kind, body) : mt) : CST.marker_op =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `In (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Not_sp_in (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_space (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_linebreak ((kind, body) : mt) : CST.linebreak =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Sp_comm_pat_509ec78 (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_space (Run.matcher_token v0),
                        trans_comment (Run.matcher_token v1),
                        trans_pat_509ec78 (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_sp_pat_509ec78 (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> trans_space (Run.matcher_token v))
                          v0
                        ,
                        trans_pat_509ec78 (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_url ((kind, body) : mt) : CST.url =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_90320f7 (
                  trans_pat_90320f7 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_1a808a5 (
                  trans_pat_1a808a5 (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Env_var (
                      trans_env_var (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Pat_09700b0 (
                      trans_pat_09700b0 (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_requirement_opt ((kind, body) : mt) : CST.requirement_opt =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `DASH_cdf9ae5 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASHDs (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `DASH_c54adde (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Sp (
                  trans_space (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v3 with
            | Alt (0, v) ->
                `Arg (
                  trans_argument (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Quoted_str (
                  trans_quoted_string (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_version_spec ((kind, body) : mt) : CST.version_spec =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Vers_list (
            trans_version_list (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Opt_sp_LPAR_vers_list_opt_sp_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3; v4] ->
                (
                  Run.opt
                    (fun v -> trans_space (Run.matcher_token v))
                    v0
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  trans_version_list (Run.matcher_token v2),
                  Run.opt
                    (fun v -> trans_space (Run.matcher_token v))
                    v3
                  ,
                  Run.trans_token (Run.matcher_token v4)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_marker_expr ((kind, body) : mt) : CST.marker_expr =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_marker_var (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Vers_cmp (
                  trans_version_cmp (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Marker_op (
                  trans_marker_op (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v3
            ,
            trans_quoted_string (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_url_spec ((kind, body) : mt) : CST.url_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v2
            ,
            trans_url (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_global_opt ((kind, body) : mt) : CST.global_opt =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_DASH_choice_EQ_choice_arg_61081d4 (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `DASH_0fd07b3 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASH_7e0b961 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `DASH_c2015a3 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `DASH_819a70f (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `EQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Sp (
                        trans_space (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v2 with
                  | Alt (0, v) ->
                      `Arg (
                        trans_argument (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Quoted_str (
                        trans_quoted_string (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_DASH (
            (match v with
            | Alt (0, v) ->
                `DASH_b141e1e (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASH_046c7ad (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `DASHDs (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `DASH_a1cf4d5 (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Choice_DASHi_opt_sp_choice_url (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `DASHi (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_space (Run.matcher_token v))
                    v1
                  ,
                  (match v2 with
                  | Alt (0, v) ->
                      `Url (
                        trans_url (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Quoted_str (
                        trans_quoted_string (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Choice_DASH_choice_EQ_choice_url (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `DASH_3199eac (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASH_a88e2fb (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `EQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Sp (
                        trans_space (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v2 with
                  | Alt (0, v) ->
                      `Url (
                        trans_url (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Quoted_str (
                        trans_quoted_string (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Choice_DASHc_opt_sp_choice_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `DASHc (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASHr (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_space (Run.matcher_token v))
                    v1
                  ,
                  (match v2 with
                  | Alt (0, v) ->
                      `Arg (
                        trans_argument (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Quoted_str (
                        trans_quoted_string (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Choice_DASH_choice_EQ_choice_arg_10363ea (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `DASH_2f2c9e5 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASH_375114c (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `EQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Sp (
                        trans_space (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v2 with
                  | Alt (0, v) ->
                      `Arg (
                        trans_argument (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Quoted_str (
                        trans_quoted_string (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Choice_DASHe_opt_sp_choice_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `DASHe (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASHf (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_space (Run.matcher_token v))
                    v1
                  ,
                  (match v2 with
                  | Alt (0, v) ->
                      `Arg (
                        trans_argument (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Quoted_str (
                        trans_quoted_string (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Url (
                        trans_url (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Choice_DASH_choice_EQ_choice_arg_c5ea372 (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `DASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASHDs (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `EQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Sp (
                        trans_space (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v2 with
                  | Alt (0, v) ->
                      `Arg (
                        trans_argument (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Quoted_str (
                        trans_quoted_string (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Url (
                        trans_url (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_marker ((kind, body) : mt) : CST.marker =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Marker_expr (
            trans_marker_expr (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Marker_or (
            trans_marker_or (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Marker_and (
            trans_marker_and (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Marker_paren (
            trans_marker_paren (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_marker_and ((kind, body) : mt) : CST.marker_and =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_marker (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v3
            ,
            trans_marker (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_marker_or ((kind, body) : mt) : CST.marker_or =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_marker (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v3
            ,
            trans_marker (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_marker_paren ((kind, body) : mt) : CST.marker_paren =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v1
            ,
            trans_marker (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_marker_spec ((kind, body) : mt) : CST.marker_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_space (Run.matcher_token v))
              v2
            ,
            trans_marker (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_requirement ((kind, body) : mt) : CST.requirement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_package (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_extras_ (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Vers_spec (
                      trans_version_spec (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Url_spec (
                      trans_url_spec (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> trans_marker_spec (Run.matcher_token v))
              v3
            ,
            Run.repeat
              (fun v -> trans_requirement_opt (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_file ((kind, body) : mt) : CST.file =
  match body with
  | Children v ->
      Run.repeat
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Opt_sp_opt_comm_pat_509ec78 (
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.opt
                        (fun v -> trans_space (Run.matcher_token v))
                        v0
                      ,
                      Run.opt
                        (fun v -> trans_comment (Run.matcher_token v))
                        v1
                      ,
                      trans_pat_509ec78 (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
          | Alt (1, v) ->
              `Opt_sp_choice_requ_choice_sp_comm_pat_509ec78 (
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.opt
                        (fun v -> trans_space (Run.matcher_token v))
                        v0
                      ,
                      (match v1 with
                      | Alt (0, v) ->
                          `Requ (
                            trans_requirement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Url (
                            trans_url (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Pat_d0b6c52 (
                            trans_pat_d0b6c52 (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Global_opt (
                            trans_global_opt (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      (match v2 with
                      | Alt (0, v) ->
                          `Sp_comm_pat_509ec78 (
                            (match v with
                            | Seq [v0; v1; v2] ->
                                (
                                  trans_space (Run.matcher_token v0),
                                  trans_comment (Run.matcher_token v1),
                                  trans_pat_509ec78 (Run.matcher_token v2)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Opt_sp_pat_509ec78 (
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.opt
                                    (fun v -> trans_space (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_pat_509ec78 (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "linebreak" ->
      (match translate_tree src node trans_linebreak with
      | None -> None
      | Some x -> Some (`Linebreak (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_file

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

